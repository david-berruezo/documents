Jerarquia template
----------------------------------------
1.- Home Page display
	1.1.- front-page	
	1.2.- home.php
	1.3.- index.php

2.- Front Page display 
	1.1.- front-page	
	1.2.- home.php
	1.3.- index.php
	


FUNCIONES
---------------------------------------
1.- Para los templates
	1.1.- get_footer
	1.2.- get_header
	1.3.- get_sidebar
	1.4.- get_search_forma	
2.- Para el lenguaje
	2.1.- langauge_atributes (PARA PAGINA MULTIIDIOMA)
3.- Para la configuración del blog	
	3.1.- bloginfo();
		‘name’ – Site title (set in Settings > General)
		‘description’ – Site tagline (set in Settings > General)
		‘wpurl’ – The WordPress address (URL) (set in Settings > General)
		‘url’ – The Site address (URL) (set in Settings > General)
		‘admin_email’ – Admin email (set in Settings > General)
		‘charset’ – The “Encoding for pages and feeds” (set in Settings > Reading)
		‘version’ – The current WordPress version
		‘html_type’ – The content-type (default: “text/html”). Themes and plugins can override the default value using the ‘pre_option_html_type’ filter
		‘text_direction’ – The text direction determined by the site’s language. is_rtl() should be used instead
		‘language’ – Language code for the current site
		‘stylesheet_url’ – URL to the stylesheet for the active theme. An active child theme will take precedence over this value
		‘stylesheet_directory’ – Directory path for the active theme. An active child theme will take precedence over this value
		‘template_url’ / ‘template_directory’ – URL of the active theme’s directory. An active child theme will NOT take precedence over this value
		‘pingback_url’ – The pingback XML-RPC file URL (xmlrpc.php)
		‘atom_url’ – The Atom feed URL (/feed/atom)
		‘rdf_url’ – The RDF/RSS 1.0 feed URL (/feed/rfd)
		‘rss_url’ – The RSS 0.92 feed URL (/feed/rss)
		‘rss2_url’ – The RSS 2.0 feed URL (/feed)
		‘comments_atom_url’ – The comments Atom feed URL (/comments/feed)
		‘comments_rss2_url’ – The comments RSS 2.0 feed URL (/comments/feed)
4.- Para agregar el datos al tag head
	4.1.- wp-head()

5.- Para agregar una clase al body por parametro por defecto pone el nombre de home
	5.2.- body_class

6.- Para agregar 
	6.1 - 
	6.2 -


Template Part
---------------------------------------
1.- content
2.- content-aside
3.- content-galery
4.- content-link
5.- content-none
6.- content-page
7.- content-quote
8.- content-search
9.- content-status

Inc
---------------------------------------
1.- back-compat
2.- custom-header
3.- customizer
4.- extras
5.- jetpack
6.- navwalker
7.- template-tags

wp-includes
---------------------------------------

DIFERENCIAS ENTRE ACTION Y FILTER
--------------------------------------
1.- ACTION == HACER ALGO NUEVO
2.- FILTER == HACER ALGO DIFERENTE


Filter Functions
-------------------------------------
has_filter()
add_filter()
apply_filters()
apply_filters_ref_array()
current_filter()
remove_filter()
remove_all_filters()
doing_filter()


Actions Functions
-------------------------------------
has_action()
add_action()
do_action()
do_action_ref_array()
did_action()
remove_action()
remove_all_actions()
doing_action()



Advanced Actions
-------------------------------------
This section contains actions related to the queries WordPress uses to figure out what posts to display, 
the WordPress loop, activating plugins, and other fundamental-level WordPress code.

activated_plugin 
Runs any time any plugin is successfully activated

add_meta_boxes 
Runs when "edit post" page loads. (3.0+)

admin_menu 
Runs after the basic admin panel menu structure is in place.

network_admin_notices 
Runs after the admin menu is printed to network admin screens.

user_admin_notices 
Runs after the admin menu is printed to user admin screens.

admin_notices 
Runs after the admin menu is printed to screens that aren't network- or user-admin screens.

all_admin_notices 
Runs after the admin menu is printed to all screens.

blog_privacy_selector 
Runs after the default blog privacy options are printed on the screen.

check_admin_referer 
Runs in the default check_admin_referrer() function after the nonce has been checked for security purposes, to allow a plugin to force WordPress to die for extra security reasons. Note that check_admin_referrer is also a "pluggable" function, meaning that plugins can override it; see Plugin API).

check_ajax_referer 
Runs in the default check_ajax_referer() function (which is called when an AJAX request goes to the wp-admin/admin-ajax.php script) after the user's login and password have been successfully validated from cookies, to allow a plugin to force WordPress to die for extra security reasons. Note that check_ajax_referer is also a "pluggable" function, meaning that plugins can override it; see Plugin API).

customize_controls_enqueue_scripts 

triggered after the WP Theme Customizer after customize_controls_init was called, its actions/callbacks executed, and its own styles and scripts enqueued, so you can use this hook to register your own scripts and styles for WP Theme Customizer. For use with the Theme Customization API (as of Version 3.4).
customize_register 

Runs on every request, allowing developers to register new theme options and controls for use with the Theme Customization API (as of Version 3.4).
customize_preview_init 

Allows you to enqueue assets (such as javascript files) directly in the Theme Customizer only. For use with the Theme Customization API (as of Version 3.4).
deactivated_plugin 

Runs any time any plugin is successfully de-activated
generate_rewrite_rules 

Runs after the rewrite rules are generated. Action function arguments: WP_Rewrite object ($wp_rewrite) by reference. Note that it is easier to use the rewrite_rules_array filter instead of this action, to modify the rewrite rules.
init 

Runs after WordPress has finished loading but before any headers are sent. Useful for intercepting $_GET or $_POST triggers.
loop_end 

Runs after the last post of the WordPress loop is processed.
loop_start 

Runs before the first post of the WordPress loop is processed.
network_admin_menu 

Runs when the basic menu structure is prepared for the Network administration page. (Administration Menus)
parse_query 

Runs at the end of query parsing in the main query or any instance of WP_Query, such as query_posts, get_posts, or get_children. Action function arguments: WP_Query object by reference.
parse_request 

Runs after the query request is parsed inside the main WordPress function wp. Action function argument: WP object ($wp) by reference.
pre_get_posts 

Runs before a query is executed in the main query or any instance of WP_Query, such as query_posts(), get_posts(), or get_children(). This hook is called after the query variable object is created, but before the query is actually run, and can be used to to alter the primary query before it is run. Also see is_main_query(). Action function arguments: WP_Query object by reference.
sanitize_comment_cookies 

Runs after cookies have been read from the HTTP request.
send_headers 

Runs after the basic HTTP headers are sent inside the main WordPress function wp(). Action function argument: WP object ($wp) by reference.
shutdown 

Runs when the page output is complete.
update_(meta_type)_meta 

Runs when a metadata gets saved.
updated_(meta_type)_meta 

Runs when a metadata has been updated.
upgrader_process_complete 

Runs when the plugin downloader/upgrader class finishes running
wp_loaded 

This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated.
wp 



Dashboard "Right Now" Widget Actions
--------------------------------------

right_now_content_table_end 
Adds table rows at the bottom the content column of the Right Now Dashboard widget.

right_now_table_end 
Called after displaying the number of Spam comments in the Discussion column of the Right Now Dashboard widget.

right_now_discussion_table_end 
Called after displaying the number of Spam comments and after the right_now_table_end action in the Discussion column of the Right Now Dashboard widget.

right_now_end 
Called after the current version information is displayed on the Right Now Dashboardwidget. (Note: In v3.4, this is actually rightnow_end. See ticket #21046.)

activity_box_end 
Last action called on the Right Now Dashboard widget.


Taxonomy and Terms
--------------------------------------
edit_terms 
(actually an action, but often used like a filter) hooked in prior to saving taxonomy/category change in the database.

edited_terms 
applied after saving taxonomy/category change in the database.

edited_$taxonomy 
applied after saving specific taxonomy change in the database.

pre_delete_term (Since version 4.1.0) 
applied before any action to delete term from database.

delete_term_taxonomy (Since version 2.9.0) 
applied immediately before a term taxonomy ID is deleted from database (after having change chidren's term).

deleted_term_taxonomy (Since version 2.9.0) 
applied immediately after a term taxonomy ID is deleted.

delete_term (Since version 2.5.0) 
applied after a term is deleted from the database and the cache is cleaned. (Paramètres : $Term_ID, $Term_taxonomy_ID, $Taxonomy_slug, $already_deleted_term)

delete_$taxonomy (Since version 2.3.0) 
applied after a term in a specific taxonomy is deleted. (Paramètres : $Term_ID, $Term_taxonomy_ID, $already_deleted_term)


Comment, Ping, and Trackback Actions
--------------------------------------

comment_closed 
Runs when the post is marked as not allowing comments while trying to display comment entry form. Action function argument: post ID.

comment_id_not_found 
Runs when the post ID is not found while trying to display comments or comment entry form. Action function argument: post ID.

comment_flood_trigger 
Runs when a comment flood is detected, just before wp_die is called to stop the comment from being accepted. Action function arguments: time of previous comment, time of current comment.

comment_(old status)_to_(new status) 
Runs when a comment status transition occurs. Action function arguments: Comment object.

comment_on_draft 
Runs when the post is a draft while trying to display a comment entry form or comments. Action function argument: post ID.

comment_post 
Runs just after a comment is saved in the database. Action function arguments: comment ID, approval status ("spam", or 0/1 for disapproved/approved).

edit_comment 
Runs after a comment is updated/edited in the database. Action function arguments: comment ID.

delete_comment 
Runs just before a comment is deleted. Action function arguments: comment ID.

deleted_comment 
Runs just after a comment is deleted. Action function arguments: comment ID.

trash_comment 
Runs just before a comment is trashed. Action function arguments: comment ID.

trashed_comment 
Runs just after a comment is trashed. Action function arguments: comment ID.

comment_closed 
Runs when the post is marked as not a spam.

pingback_post 
Runs when a ping is added to a post. Action function argument: comment ID.

pre_ping 
Runs before a ping is fully processed. Action function arguments: array of the post links to be processed, and the "pung" setting for the post.

trackback_post 
Runs when a trackback is added to a post. Action function argument: comment ID.

wp_blacklist_check 
Runs to check whether a comment should be blacklisted. Action function arguments: author name, author email, author URL, comment text, author IP address, author's user agent (browser). Your function can execute a wp_die to reject the comment, or perhaps modify one of the input arguments so that it will contain one of the blacklist keywords set in the WordPress options.

wp_insert_comment 
Runs whenever a comment is created.

wp_set_comment_status 
Runs when the status of a comment changes. Action function arguments: comment ID, status string indicating the new status ("delete", "approve", "spam", "hold").




Blogroll Actions
--------------------------------------

add_link 
Runs when a new blogroll link is first added to the database. Action function arguments: link ID.

delete_link 
Runs when a blogroll link is deleted. Action function arguments: link ID.

edit_link 
Runs when a blogroll link is edited. Action function arguments: link ID.


Feed Actions
--------------------------------------

atom_entry 
Runs just after the entry information has been printed (but before closing the entry tag) for each blog entry in an atom feed.

atom_head 
Runs just after the blog information has been printed in an atom feed, just before the first entry.

atom_ns 
Runs inside the root XML element for an atom feed (to add namespaces).

commentrss2_item 
Runs just after a single comment's information has been printed in a comment feed (but before closing the item tag). Action function arguments: comment ID, post ID.

do_feed_(feed) 
Runs when a feed is generated, where feed is the type of feed (rss2, atom, rdf, etc.). Use priority less than 10 to run before printing the feed. Action function argument: true (the feed is for comments) or false (it is for posts).

rdf_header 
Runs just after the blog information has been printed in an RDF feed, just before the first entry.

rdf_item 
Runs just after the entry information has been printed (but before closing the item tag) for each blog entry in an RDF feed.

rdf_ns 
Runs inside the root XML element in an RDF feed (to add namespaces).

rss_head 
Runs just after the blog information has been printed in an RSS feed, just before the first entry.

rss_item 
Runs just after the entry information has been printed (but before closing the item tag) for each blog entry in an RSS feed.

rss2_head 
Runs just after the blog information has been printed in an RSS 2 feed, just before the first entry.

rss2_item 
Runs just after the entry information has been printed (but before closing the item tag) for each blog entry in an RSS 2 feed.

rss2_ns 
Runs inside the root XML element in an RSS 2 feed (to add namespaces).


Template Actions
--------------------------------------

after_setup_theme 
Runs during a themes initialization. Is generally used to perform basic setup, registration, and init actions for a theme.

comment_form
Runs at the bottom of a comment form rendered by comment_form(), right before the closing </form>. Action function argument: the post ID.

do_robots 
Runs when the template file chooser determines that it is a robots.txt request.

do_robotstxt 
Runs in the do_robots() function before it prints out the Disallow lists for the robots.txt file.

get_footer 
Runs when the template calls the get_footer() function, just before the footer.php template file is loaded.

get_header 
Runs when the template calls the get_header() function, just before the header.php template file is loaded.

switch_theme 
Runs when the blog's theme is changed. Action function argument: name of the new theme. If used in a theme, it only works if the theme that adds action is the one being disabled.

after_switch_theme 
Runs when the blog's theme is changed. Action function argument: name of the new theme. If used in a theme, it only works if the theme that adds action is the one being enabled. Can be used to run certain code when enabling a theme.

load-themes.php 
Runs when the theme is activate or deactivate (replace by an other).

template_redirect 
Runs before the determination of the template file to be used to display the requested page.

wp_footer 
Runs when the template calls the wp_footer() function, generally near the bottom of the blog page.

wp_head 
Runs when the template calls the wp_head() function. This hook is generally placed near the top of a page template between <head> and </head>. This hook does not take any parameters.

wp_meta 
Runs when the sidebar.php template file calls the wp_meta() function, to allow the plugin to insert content into the sidebar.

wp_print_scripts 
Runs just before WordPress prints registered JavaScript scripts into the page header.


Administrative Actions
---------------------------
activate_(plugin file name) 
Runs when the plugin is first activated. See Function_Reference/register_activation_hook.

activity_box_end 
Runs at the end of the activity box on the admin Dashboard screen.

add_category_form_pre 
Runs before the add category form is put on the screen in the admin menus.

add_option_(option_name) 
Runs after a WordPress option has been added by the add_option() function. Action function arguments: option name, option value. You must add an action for the specific options that you want to respond to, such as 'add_option_foo' to respond when option "foo" has been added.

add_option 
Runs before an option gets added to the database.

added_option 
Runs after an an option has been added.

admin_head 
Runs in the HTML <head> section of the admin panel.

admin_head-(page_hook) or admin_head-(plugin_page) 
Runs in the HTML <head> section of a specific admin page or the admin panel of a plugin-generated page.

admin_init 
Runs at the beginning of every admin page before the page is rendered. See wp-admin/admin.php, wp-admin/admin-post.php, and wp-admin/admin-ajax.php.

admin_footer-(plugin_page) 
Runs at the end of the <body> section of the admin panel of a plugin-generated page.

admin_post_(action) 
also: admin_post_nopriv_(action) - Runs a handler for an unspecified GET or POST request.

admin_footer 
Runs at the end of the admin panel inside the body tag

admin_enqueue_scripts 
Runs in the HTML header so a plugin or theme can enqueue JavaScript and CSS to all admin pages.

admin_print_scripts 
Runs in the HTML header so a plugin can add JavaScript scripts to all admin pages.

admin_print_scripts-(page_hook) or admin_print_scripts-(plugin_page) 
Runs to print JavaScript scripts in the HTML head section of a specific plugin-generated admin page. The (page_hook) is returned when using any of the functions that add plugin menu items to the admin menu: add_management_page(), add_options_page(), etc. Example:

function myplugin_menu() {
  if ( function_exists('add_management_page') ) {
    $page = add_management_page( 'myplugin', 'myplugin', 'manage_options', 'myplugin_slug', 'myplugin_admin_page' );
    add_action( "admin_print_scripts-$page", 'myplugin_admin_head' );
  }
} 

admin_print_styles 
Runs in the HTML header so a plugin can add CSS/Stylesheets to all admin pages.

admin_print_styles-(page_hook) or admin_print_style-(plugin_page) 
Runs when styles should be enqueued with wp_enqueue_style() for a particular admin page. Use the return value of a function such as add_submenu_page() to determine the value of (page_hook).

check_passwords 
Runs to validate the double-entry of password when creating a new user. Action function arguments: array of login name, first password, second password.

dbx_page_advanced 
Runs at the bottom of the "advanced" section on the page editing screen in the admin menus.

dbx_page_sidebar 
Runs at the bottom of the sidebar on the page editing screen in the admin menus.

dbx_post_advanced 
Runs at the bottom of the "advanced" section on the post editing screen in the admin menus.

dbx_post_sidebar 
Runs at the bottom of the sidebar on the post editing screen in the admin menus. Use add_meta_box() in Wordpress 2.5 and higher.

deactivate_(plugin file name) 
Runs when a plugin is deactivated.

delete_option_(option_name) 
Runs after a WordPress option has been deleted by the delete_option() function. Action function arguments: option name. You must add an action for the specific options that you want to respond to, such as 'delete_option_foo' to respond when option "foo" has been deleted.

delete_option 
Runs before an option gets deleted from the database.

deleted_option 
Runs after an an option has been deleted.

delete_user 
Runs when a user is deleted. Action function arguments: user ID.

edit_category_form 
Runs after the add/edit category form is put on the screen (but before the end of the HTML form tag).

edit_category_form_pre 
Runs before the edit category form is put on the screen in the admin menus.

edit_tag_form 
Runs after the add/edit tag form is put on the screen (but before the end of the HTML form tag).

edit_tag_form_pre 
Runs before the edit tag form is put on the screen in the admin menus.

edit_form_top 
Runs inside the form before the title on WordPress post edit screen (and Custom Post Types), but after the inital hidden fields (user_ID, action, etc.).

edit_form_after_title 
Runs after the title on WordPress post edit screen (and Custom Post Types) but before the built in WordPress content area.

edit_form_after_editor 
Runs just after the WordPress post editor but before all other meta boxes. also available in Custom Post Types.

edit_form_advanced 
Runs just before the "advanced" section of the post editing form in the admin menus.

edit_page_form 
Runs just before the "advanced" section of the page editing form in the admin menus.

edit_user_profile 
Runs near the end of the user profile editing screen in the admin menus.

load-(page) 
Runs when an administration menu page is loaded. This action is not usually added directly -- see Adding Administration Menus for more details of how to add admin menus. If you do want to use it directly, the return value from add_options_page() and similar functions gives you the "(page)" part of the action name.

login_form 
Runs just before the end of the login form.

login_head 
Runs just before the end of the HTML head section of the login page.

lost_password 
Runs before the "retrieve your password by email" form is printed on the login screen.

lostpassword_form 
Runs at the end of the form used to retrieve a user's password by email, to allow a plugin to supply extra fields.

lostpassword_post 
runs when the user has requested an email message to retrieve their password, to allow a plugin to modify the PHP $_POST variable before processing.

manage_link_custom_column 
Runs when there is an unknown column name for the blogroll managing admin screen. Action function arguments: column name, link ID. See also filter manage_link_columns in the Plugin API/Filter Reference, which adds custom columns.

manage_posts_custom_column 
Runs when there is an unknown column name for the managing posts admin screen. Action function arguments: column name, post ID. See also filter manage_posts_columns in the Plugin API/Filter Reference, which adds custom columns. (see Scompt's tutorial for examples and use.)

manage_pages_custom_column 
Runs when there is an unknown column name for the managing pages admin screen. Action function arguments: column name, page ID. See also filter manage_pages_columns in the Plugin API/Filter Reference, which adds custom columns.

manage_media_custom_column 
Runs when there is an unknown column name for the managing media admin screen. Action function arguments: column name, page ID. See also filter manage_media_columns in the Plugin API/Filter Reference, which adds custom columns.

manage_{$post_type}_posts_custom_column 
Runs when there is an unknown column name for the managing custom post type admin screen. Action function arguments: column name, post ID. See also filter manage_${post_type}_posts_columns in the Plugin API/Filter Reference, which adds custom columns for custom post types.

password_reset 
Runs before the user's password is reset to a random new password.

personal_options_update 
Runs when a user updates personal options from the admin screen.

plugins_loaded 
Runs after all plugins have been loaded.

profile_personal_options 
Runs at the end of the Personal Options section of the user profile editing screen.

profile_update 
Runs when a user's profile is updated. Action function argument: user ID.

quick_edit_custom_box 
Runs when there is an unknown column name when creating the quick editor.

register_form 
Runs just before the end of the new user registration form.

register_post 
Runs before a new user registration request is processed.

restrict_manage_posts 
Runs before the list of posts to edit is put on the screen in the admin menus.

retrieve_password 
Runs when a user's password is retrieved, to send them a reminder email. Action function argument: login name.

set_current_user 
Runs after the user has been changed by the default wp_set_current_user() function. Note that wp_set_current_user() is also a "pluggable" function, meaning that plugins can override it; see Plugin API).

show_user_profile 
Runs near the end of the user profile editing screen.

sidebar_admin_page 
Runs after the main content on the widgets admin page.

sidebar_admin_setup 
Runs early when editing the widgets displayed in sidebars.

simple_edit_form 
Runs at the end of the "simple" post editing form in the admin menus (by default the simple form is used only for bookmarklets -- it doesn't have the "advanced" sections).

update_option_(option_name) 
Runs after a WordPress option has been updated by the update_option() function. Action function arguments: old option value, new option value. You must add an action for the specific options that you want to respond to, such as 'update_option_foo' to respond when option "foo" has been updated.

update_option 
Runs before an option gets updated to the database.

updated_option 
Runs after an option has been updated.

upload_files_(tab) 
Runs to print a screen on the upload files admin screen; "tab" is the name of the custom action tab. Define custom tabs using the wp_upload_tabs filter (see Plugin API/Filter Reference).

user_new_form 
Runs near the end of the "Add New" user screen. Action function argument: Passes the string "add-existing-user" on multisite or "add-new-user" on single site and for network admins.

user_profile_update_errors 
Runs just before updated user details are committed to the database.

wpmu_new_user 
Runs when a user's profile is first created in a Multisite environment. Action function argument: user ID. If not in Multisite then use user_register.

user_register 
Runs when a user's profile is first created. Action function argument: user ID.

welcome_panel 
Allows you to hide the Welcome Panel in the Dashboard. This is also a smart filter, which hides the related Screen Option.

wp_ajax_(action) 
also: wp_ajax_nopriv_(action) - Runs to do an unknown type of AJAX request handler.

wp_authenticate 
Runs to authenticate a user when they log in. Action function arguments: array with user name and password.

wp_login 
Runs when a user logs in.

wp_logout 
Runs when a user logs out.



WORDPRESS QUERIES
------------------------------------
$wp_query = new WP_Query
query_posts()
get_posts() 


wordpress
------------------------------------
Paginas funcionan como rompecabezas


Childtheme
------------------------------------
/*
Theme Name: phpandfriends
Theme URI: http://www.davidberruezo.com/wordpress-themes/ecommerce/
Author: David Berruezo
Author URI: http://www.davidberruezo.com/
Description: Education Hub is a clean and elegant WordPress education theme with simplistic but unique look and feel. This theme is best suited for college, school, university and other educational websites. But this theme is not binded to be fit for educational websites only. This is also flexible enough to be used for business and corporate websites. Theme is highly customizable with layout settings and several other theme options which can be customized by using Theme Options panel based on powerful Customizer API. Education Hub helps you to easily and intuitively create professional and appealing educational websites. Official Support Forum: http://themepalace.com/support-forum/ Full Demo: http://wenthemes.com/theme-demos/?demo=education-hub
Version: 1.7
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Text Domain: twentysixteen
*/


Tipos de Post Custom Type
-----------------------------------
Post
Page
Attachment
Revision
Nav Menu

POST
------------------------------------
reverse chronological
posts can use for reasons including news, events,business data
titulo usuaro post permalink

Tema (SOLO NECESITA 2 FICHEROS)
------------------------------------
index.php
style.css


Archivos de tema
------------------------------------
Author Archive
Category Archive
Custom Post Type Archive
Custom Taxonomy Archive
Date Archive
Tag Archive


Ejemplo de slidebar
------------------------------------
Buscador
Entradas recientes
Etiquetas
Comentarios recientes
Ordenar for fecha
Calendario
Categorias
Subscripción


Filtros y ganchos
------------------------------------
Acción Ganchos

Ganchos de acción son ganchos que se disparan durante un evento en particular o acción que ocurre en el flujo de una solicitud particular de WordPress. 
Uno puede añadir su propia función en este tipo de acciones que pueden realizar alguna tarea adicional en esa acción en particular. 

La función add_action puede tomar cuatro argumentos. 
	1.- Nombre del gancho que desea conectar. 
	2.- El nombre de la función a llamar cuando el gancho acción sucede. 
	3.- El parámetro es un número entero que define la prioridad

Filtros

Los filtros de WordPress se disparan en general antes de guardar o mostrar en pantalla cualquier contenido. Se puede agregar una función en un filtro y 
alterar el contenido que se guarda o se muestra en el navegador. Generalmente filtros de paso el contenido como argumentos y esperar que el valor de 
retorno para ser el contenido filtrado. Vamos a ver cómo utilizar filtros de WordPress en nuestros plugins / temas en las siguientes secciones.
El uso de ganchos de acción
Ahora vamos a ver cómo se puede enganchar en un gancho de acción ya definida ya sea por WordPress núcleo mismo o algún otro plugin o tema. Para conectar su función en uno de los ganchos de acción que tendrá que utilizar la función add_action WordPress.




FUNCIONES GENERAL TEMPLATE
------------------------------------
ob_start() == Para almazenar contenido en un buffer de salida, luego podemos copiar o enviar este buffer a la salida 

1.-  function get_header( $name = null )  {} // Cargamos el header
2.-  function get_footer( $name = null )  {} // Cargamos el footer
3.-  function get_sidebar( $name = null ) {} // Cargamos el sidebar
4.-  function get_template_part( $slug, $name = null ) {} // Cargamos partes de template podemos repetir la carga
5.-  function get_search_form( $echo = true ) {} // Cargamos el formulario de busqueda
6.-  function get_calendar( $initial = true, $echo = true ) {} Muestra un calendario con los dias seleccionados donde hay un post
7.-  function wp_loginout ($redirect = '', $echo = true) {} Devuelve la pagina para loguearse
8.-  function wp_logout_url($redirect = '') {} Devuelve la pagina para salir de la pagina o hacer logout
9.-  function wp_logout_url($redirect = '') {} Devuelve la pagina para salir de la pagina o hacer logout
10.- function wp_login_url($redirect = '', $force_reauth = false) {} // Nos envia una url para el registro o logueo
11.- function wp_registration_url() {} // Nos envia una url para el registro o logueo
12.- function wp_login_form( $args = array() ) {} // Crea un formulario para el inicio de sesión
13.- function wp_lostpassword_url( $redirect = '' ) { }
14.-   



HEADER DE UN PLUGIN
-----------------------
1- author: Listed below the plugin name
2- Author URI: Together with "Author", this creates a link to the author's site
3- Description: Main block of text describing the plugin
4- Plugin Name: The displayed name of the plugin
5- Plugin URI: Destination of the "Visit plugin site" link
6- Version: Use this to track your changes over time



GENERAL TAGS
----------------------
wp-includes/general-template.php

get_header()
get_footer()
get_sidebar()
get_template_part()
get_search_form()
wp_loginout()
wp_logout_url()
wp_login_url()
wp_login_form()
wp_lostpassword_url()
wp_register()
wp_meta()
bloginfo()
get_bloginfo()
get_current_blog_id()
wp_title()
single_post_title()
post_type_archive_title()
single_cat_title()
single_tag_title()
single_term_title()
single_month_title()
get_archives_link()
wp_get_archives()
calendar_week_mod()
get_calendar()
delete_get_calendar_cache()
allowed_tags()
wp_ajaxurl() ?? Not defined in any WP file, at least until 12/01/19.
wp_enqueue_script()


Author tags
----------------------
wp-includes/author-template.php

the_author()
get_the_author()
the_author_link()
get_the_author_link()
the_author_meta()
the_author_posts()
the_author_posts_link()
wp_dropdown_users()
wp_list_authors()
get_author_posts_url()


Bookmark tags
----------------------
wp-includes/bookmark-template.php and  wp-includes/bookmark.php

wp_list_bookmarks()
get_bookmark()
get_bookmark_field()
get_bookmarks()

Category tags
----------------------
wp-includes/category-template.php

category_description()
single_cat_title()
the_category()
the_category_rss()
wp_dropdown_categories()
wp_list_categories()
single_tag_title()
tag_description()
the_tags()
wp_generate_tag_cloud()
wp_tag_cloud()
term_description()
single_term_title()
get_the_term_list()
the_terms()
the_taxonomies()


Comment tags
----------------------
wp-includes/comment-template.php

cancel_comment_reply_link()
comment_author()
comment_author_email()
comment_author_email_link()
comment_author_IP()
comment_author_link()
comment_author_rss()
comment_author_url()
comment_author_url_link()
comment_class()
comment_date()
comment_excerpt()
comment_form_title()
comment_form()
comment_ID()
comment_id_fields()
comment_reply_link()
comment_text()
comment_text_rss()
comment_time()
comment_type()
comments_link()
comments_number()
comments_popup_link()
comments_popup_script()
comments_rss_link()
get_avatar()
next_comments_link()
paginate_comments_links()
permalink_comments_rss()
previous_comments_link()
wp_list_comments()


Link tags
----------------------
wp-includes/link-template.php

the_permalink()
user_trailingslashit()
permalink_anchor()
get_permalink()
get_post_permalink()
post_permalink()
get_page_link()
get_attachment_link()
wp_shortlink_header()
wp_shortlink_wp_head()
edit_bookmark_link()
edit_comment_link()
edit_post_link()
get_edit_post_link()
get_delete_post_link()
edit_tag_link()
get_admin_url()
get_home_url()
get_site_url()
home_url()
site_url()
get_search_link()
get_search_query()
the_feed_link()


Post tags
----------------------
wp-includes/post-template.php

body_class()
next_image_link()
next_post_link()
next_posts_link()
post_class()
post_password_required()
posts_nav_link()
previous_image_link()
previous_post_link()
previous_posts_link()
single_post_title()
sticky_class()
the_category()
the_category_rss()
the_content()
the_content_rss()
the_excerpt()
the_excerpt_rss()
the_ID()
the_meta()
the_tags()
the_title()
get_the_title()
the_title_attribute()
the_title_rss()
wp_link_pages()
get_attachment_link()
wp_get_attachment_link()
the_attachment_link()
the_search_query()
is_attachment()
wp_attachment_is_image()
wp_get_attachment_image()
wp_get_attachment_image_src()
wp_get_attachment_metadata()
get_the_date()
single_month_title()
the_date()
the_date_xml()
the_modified_author()
the_modified_date()
the_modified_time()
the_time()
the_shortlink()
wp_get_shortlink()


Post Thumbnail tags
-----------------------
wp-includes/post-thumbnail-template.php

has_post_thumbnail()
get_post_thumbnail_id()
the_post_thumbnail()
get_the_post_thumbnail()


Navigation Menu tags
-----------------------
wp-includes/nav-menu-template.php

wp_nav_menu()
walk_nav_menu_tree()


KARIM
------------------
675 87 77 51
634 18 65 46




	