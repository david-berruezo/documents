Api Rest
-------------------
1.- Arquitectura con la que vas a trabajar con tus servicios.
2.- Són un montón de reglas para trabajar con estos servicios.
3.- No tienen estados === REST ===  
4.- Es como una capa de abstracción de bd == Conecta usuario y se envia el token repetidas veces para saber que los usuarios han entrado más veces
5.- Api rest trabaja en json,xml el formato que queramos por http. Le especificamos en el content type el formato
6.- El soap == Idea robusta == Implementación dolor de cabeza == 
7.- Servicios web == 
			1.- Url texto plano y que en el archivo tengas contenido
			2.- Xml
			3.- Rpc
			4.- Json-Rpc
			5.- Usuario.diagonal.obtenerUsuario.php === 1 servicio
			6.- Usuario.diagonal.crearUsuario.php	=== 2 servicio
			7.- Cada url tiene asignado un servicio por donde vas a entrar
			8.- Con Rest, rpc u otros solo tienes un único punto de entrada 
					8.1- tienes api.php o index.php === 
								8.1.1.- Nombre del controlador que quieres utilizar
								8.1.2.- Accion que quieres utilizar
								8.1.3.- Datos que vas a utilizar
								8.1.4.- Le manadas todos estos datos y el servidor los reconoce y los trata
								8.1.5.- Soup es una nueva capa de abstración
									8.1.5.1.- Tiene una definición de todos los servicios que tiene, definiciones y tipos
									8.1.5.2.- En soap se utilizaban verbos 
			9.- Rest provee un estandard y utiliza nombres Ejemplo user ===== get user    = get 
											  create user = insert
											  update user = update
											  delete user = delete


Aplicacion basada en rest
---------------------------

1.- Se define que recursos va a tener esa api 
2.- Que cosas tiene que contestar
3.- Nos basamos en la capa de abstracción que tiene nuestra base de datos

1.- Rest son todos recursos 
	1.1.- Una colección son todos los usuarios
	1.2.- Un recurso es un usuario
	1.3.- Definir bien los recursos
	1.4.- Es una api que solo sabe de datos
	1.5.- Mini servicios también hay
	1.6.- Api rest puedes aplicarlo en cualquier tecnologia
	1.7.- Seria como una vista modelo controlador pero sin vista simplemente le sacamos los datos
							
												 





VERBOS RESTFUL
-----------------------------------
1.- GET: obtiene el recurso especificado por la URL. La URL contiene toda la información necesaria para localizar y obtener el recurso.
2.- POST: envía o somete datos para que sean procesados por el recurso identificado en la URL. Generalmente los datos que se envían se especifican en el cuerpo de la petición. El ejemplo más habitual es cuando subimos una imagen a un servidor a través del navegador ya que el verbo empleado es POST y los datos binarios de la imagen se especifican en el cuerpo de la petición.
3.- PUT: sube o actualiza un recurso especificado. Es la forma más eficiente de subir archivos a un servidor, pero está en desuso porque la mayoría de las empresas de hosting tienen deshabilitado este verbo, por eso se ha generalizado el uso del verbo POST a la hora de subir archivos.
4.- DELETE: Borra el recurso especificado.
5.- HEAD: Obtiene sólo las cabeceras de una petición. Es un verbo similar a GET, sólo que GET además de las cabeceras también obtiene el cuerpo de la respuesta.
6.- TRACE: este método se emplea con fines de diagnóstico ya que solicita al servidor que envíe todos los datos de la solicitud enviada.
7.- OPTIONS: sirve para obtener una lista de los métodos HTTP que soporta el servidor (dicho de otra manera, nos informa sobre los verbos que soporta el servidor).
8.- CONNECT: se utiliza para saber si tenemos acceso a un determinado host.


EJEMPLO PETICION HTTP RESTFUL
-----------------------------------
1.- /clients
	1.1.- Listado de clientes
2.- /clients/jim
	2.1.- Detalle de clientes


EJEMPLO PETICION HTTP NO RESTFUL
-----------------------------------
1. /clients/add


EJEMPLO DE URL QUE DEBERIA AJUSTARSE A NUESTROS DATOS
-----------------------------------------------------------
http://localhost/api.php/{$table}/{$id}


ESPECIFICAR LA ACCIÓN
-----------------------------------------------------------
Pero, ¿cómo se especifica una acción? Por ejemplo, ¿cómo dices que quieres crear un nuevo registro de cliente en lugar de recuperarlo? 
Aquí es donde entran en juego los verbos HTTP.


VERBOS HTTP MAS IMPORTANTES
-----------------------------------------------------------
1.- GET			=== PARA VISUALIZAR DATOS, DE SOLO LECTURA
2.- POST		=== PARA CREAR DATOS O ACTUALIZAR DATOS RECIBIENDO UN PARAMETRO (A VECES POST A VECES PUT) (POST PARA CREACION Y PUT PARA ACTUALIZACION)		
3.- PUT			=== PARA CREAR DATOS O ACTUALIZAR DATOS RECIBIENDO UN PARAMETRO (A VECES POST A VECES PUT) (PUT PARA CREACION Y POST PARA ACTUALIZACION)
4.- DELETE		=== PARA BORRAR UN REGISTRO EN PARTICULAR	


PARADIGMA
-----------------------------------------------------------
Create / Update / Delete 


SEGUROS E INSEGUROS
-----------------------------------------------------------
1.- GET			=== SEGURO
2.- POST		=== INSEGURO		
3.- PUT			=== INSEGURO
4.- DELETE		=== INSEGURO


METODOS IDEMPOTENTES
-----------------------------------------------------------
1.- PUT 
2.- DELETE

METODOS NO IDEMPOTENTES
-----------------------------------------------------------
1.- POST 


